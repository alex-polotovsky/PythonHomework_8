"""
Задание 1.
Реализовать класс Matrix (матрица). Обеспечить перегрузку конструктора класса (метод __init()__),
который должен принимать данные (список списков) для формирования матрицы.
[[], [], []]
Следующий шаг — реализовать перегрузку метода __str()__ для вывода матрицы в привычном виде.
Далее реализовать перегрузку метода __add()__ для реализации операции
сложения двух объектов класса Matrix (двух матриц).
Результатом сложения должна быть новая матрица.
Подсказка: сложение элементов матриц выполнять поэлементно —
первый элемент первой строки первой матрицы складываем
с первым элементом первой строки второй матрицы и т.д.
Пример:
1 2 3
4 5 6
7 8 9

1 2 3
4 5 6
7 8 9

Сумма матриц:

2 4 6
8 10 12
14 16 18
"""


class Matrix:
    """
    Класс реализует сложение матриц.
    """

    def __init__(self, mtrx=None):
        if mtrx is None:
            mtrx = []
        self.mtrx = mtrx

    def __str__(self):
        str_mtrx = ''
        for i in self.mtrx:
            str_mtrx += '\t'.join(map(str, i)) + '\n'
        return str_mtrx

    def __add__(self, other):
        return Matrix([list(map(sum, zip(*i))) for i in zip(self.mtrx, other.mtrx)])

    def set_mtrx(self):
        """
        Функция предлагает пользователю ввести желаемое количество строк,
        а затем желаемое количество элементов в каждой строке.
        По окончании набора строки, нажмите Enter.
        Функция возвращает список списков в качестве атрибута объекта.

        :param self: Represent the instance of the class
        :return: The list of lists
        """
        k = input('Введите количество строк: ')
        print('Элементы строки через пробел:')
        mtrx = [list(map(int, input().split())) for i in range(int(k))]
        self.mtrx = mtrx


a = Matrix()
a.set_mtrx()
print('Matrix A:\n', a)

b = Matrix()
b.set_mtrx()
print('Matrix B:\n', b)

print('A + B:\n', a + b)
